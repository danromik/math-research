(*************************************************************)
(*                                                           *)
(* RefinedASM - a companion Mathematica package to the paper *)
(* "More refined enumerations of alternating-sign matrices"  *)
(*            Authors: Ilse Fischer and Dan Romik            *)
(*                                                           *)
(*************************************************************)
(*                                                           *)
(* Load the package and type RefinedASMHelp[] for usage      *)
(* instructions                                              *)
(*                                                           *)
(*************************************************************)



(*******************************************************************)
(* Computing the doubly refined enumeration numbers                *)
(*******************************************************************)

(* Computes the total and 1-refined enumeration numbers given by the Mills-Robbins-Rumsey product formulas *)
ASM[n_]:=Product[(3j+1)!/(n+j)!,{j,0,n-1}];
ASM[n_, k_] := 
 Binomial[n + k - 2, 
   k - 1] (2 n - k - 1)!/(n - k)! Product[(3 j + 1)!/(n + j)!, {j, 0, 
    n - 2}]

(* Defines the various linear equations used to compute the doubly-refined enumeration numbers A_{n,i,j} *)
binomialeqs[n_] := 
  Flatten[Table[
    x[i, j] == 
      Sum[(-1)^(p + q) Binomial[2 n - i - 2, p - i] Binomial[2 n - j - 2, q - j] *
        x[q, p], {p, i, n}, {q, j, n}], {i, 1, n}, {j, 1, n}]];
nearsymmetryeqs[n_] := 
  Flatten[Table[If[{i,j}=={n-1,1}, x[i,j] == ASM[n-2],
                 If[{i,j}=={n,2}, x[i,j] == ASM[n-2] - ASM[n-1],
                  x[i, j] == x[n + 1 - j, n + 1 - i]]], {i, 1, n}, {j, 1, n}]];
asmeqs[n_] := 
  Join[Table[x[1, j] == ASM[n - 1, j - 1], {j, 1, n}], 
   Table[x[i, n] == ASM[n - 1, n - i], {i, 1, n}]];

(* Puts all the equations together*)
alleqs[n_] := 
  Join[binomialeqs[n], nearsymmetryeqs[n], asmeqs[n]];

(* Solve the equations *)
solveeqs[n_] := 
  Solve[alleqs[n], Flatten[Table[x[i, j], {i, 1, n}, {j, 1, n}]]];

(* Packs the solutions nicely in a matrix *)
DoublyRefinedEnumerationNumbers[n_] := Module[{mat, solution}, (solution = solveeqs[n][[1]]; 
  mat = Table[0, {i, 1, n}, {j, 1, n}]; 
  Do[mat[[solution[[i]][[1]][[1]], solution[[i]][[1]][[2]]]] = 
    solution[[i]][[2]], {i, 1, n^2}]; mat)]




(*******************************************************************)
(* The explicit formula for the doubly refined enumeration numbers *)
(*******************************************************************)

(* Definition of the harmonic numbers *)
harm[m_]:=If[m<1,0,HarmonicNumber[m]];


(* Definition of X and Y *)
X[n_,i_,j_,k_]:=If[j-i<=k<=j-2,
	(-1)^(j+k+1) Binomial[3k-3j+4,k]Binomial[2j+i-2k-5,i-k-1]Binomial[i-2,k-j+i](i-1)/(k-j+3-n)
			(3harm[3j-2k-5]-3harm[3j-3k-5]+2harm[2j+i-2k-5]
			-2harm[2j-k-4]+harm[k-j+i]-harm[j-k-2]+1/(k-j+3-n)),
	Binomial[3k-3j+4,k]Binomial[2j+i-2k-5,i-k-1]/Binomial[k-j+i,i-1]/(k-j+3-n)]

Y[n_,i_,j_,k_]:=If[0<=k<=i-1, 
	(-1)^(i+k+1)(j-k-1)Binomial[3k-3j+4,k+i-j]Binomial[3j-2k-5,j-k-1]Binomial[i-1,k]/(k-j+3-n)
		(harm[3j-2k-5]-harm[2j-k-4]-harm[k]+harm[i-k-1]),
	Binomial[3k-3j+4,k+i-j]Binomial[3j-2k-5,j-k-1](j-k-1)/Binomial[k,i]/(k-j+3-n)/i]


(* Definition of S_{n,i,j} *)
S[n_,i_,j_]:=Sum[X[n,i,j,k]-Y[n,i,j,k],{k,Min[0,j-i],Max[i-1,j-2]}]


(* Definitions of B_{n,i,j} and P_{n,i,j} *)
B[n_,i_,j_]:=ASM[n-1]/(3n-5)!/(n-2)!(2n-2-i)!(2n-2-j)!(n+i-3)!(n+j-3)!/(i-1)!/(j-1)!/(n-i)!/(n-j)!

P[n_,i_,j_]:=2+2i+i^2-3j-i j+j^2-2n-2i n+j n+n^2

(* The doubly refined enumeration numbers obtained using the (conjectural) explicit formula *)
ExplicitA[n_,i_,j_] := If[i==n && j==1, -ASM[n-1],                       (* Special case 1 - bottom-left corner element *)
                          If[i==n-1 && j==1, ASM[n-2],                   (* Special case 2 - adjacent to corner element *)
                             If[i==n && j==2, ASM[n-2]-ASM[n-1],         (* Special case 3 - adjacent to corner element *)
                                B[n,i,j](n+j-i-1 + P[n,i,j]S[n,i,j])]]]  (* General case *)

ExplicitDoublyRefinedEnumerationNumbers[n_] := Table[ExplicitA[n,i,j],{i,1,n},{j,1,n}]

(* Compares the explicit formula to the real numbers and returns TRUE if they are the same *)
VerifyExplicitFormula[n_]:= (ExplicitDoublyRefinedEnumerationNumbers[n]==DoublyRefinedEnumerationNumbers[n])

VerifyExplicitFormulaForRange[minvalue_, maxvalue_] := 
       Do[Print["n=", n, "  ", VerifyExplicitFormula[n]], {n, minvalue, maxvalue}]




(*******************************************************************)
(* Usage instructions - type RefinedASMHelp[] to print them        *)
(*******************************************************************)

RefinedASMHelp[] := Print["RefinedASM - a companion Mathematica package to the paper \"More refined enumerations of alternating-sign matrices\"\nAuthors: Ilse Fischer and Dan Romik\n\n\nUsage:\n\nRefinedASMHelp[]\nprints this help message\n\nDoublyRefinedEnumerationNumbers[n]\nComputes a table of the extended doubly refined enumeration numbers A[n,i,j]\nA successful computation also proves that the sufficiency conjecture is true for that value of n\n\nExplicitDoublyRefinedEnumerationNumbers[n]\nUses the conjectural explicit formula to compute the same numbers\n\nVerifyExplicitFormula[n]\nCompares the doubly refined enumeration numbers to the result of the explicit formula and returns TRUE if they are the same\n\nVerifyExplicitFormulaForRange[minvalue, maxvalue]\nRuns VerifyExplicitFormula[n] for all values of n between minvalue and maxvalue and prints the results "]

RefinedASMShortHelp[] := Print["Type RefinedASMHelp[] for help"]

RefinedASMShortHelp[]       (* Prints out the short message when loading the file *)